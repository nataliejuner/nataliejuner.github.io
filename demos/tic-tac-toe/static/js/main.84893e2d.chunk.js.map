{"version":3,"sources":["Status.js","Board.js","App.js","serviceWorker.js","index.js"],"names":["Status","renderStatus","_this$props","_this","props","winner","player","react_default","a","createElement","this","React","Component","Board","Object","classCallCheck","possibleConstructorReturn","getPrototypeOf","call","clickHandle","index","state","newSpaces","spaces","setState","checkWinner","finalWinner","winningCombo","_this$state","xWins","oWins","i","length","_winningCombo$i","slicedToArray","b","c","indexOf","gameReset","Array","fill","renderBoxes","map","box","className","key","onClick","chooseX","chooseO","_this2","src_Status","type","disabled","App","src_Board","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.84893e2d.chunk.js","sourcesContent":["import React from 'react'\n\nclass Status extends React.Component {\n\nrenderStatus = () => {\n    let {winner, player} = this.props\n        if(winner !== null){\n            return <h3>Winner: {winner}</h3>\n        }else{\n            return <h3>Player: {player}</h3>\n        }\n    }\n\n    render(){\n        return(\n            <div>\n            {this.renderStatus()}\n            </div>\n        )\n    }\n}\n\nexport default Status;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Status from './Status'\n\nclass Board extends Component {\n    constructor (props){\n        super(props)\n        this.state = {\n            spaces: Array(9).fill(null),\n            player: null,\n            winner: null,\n            xWins: 0,\n            oWins: 0\n        }\n    }\n\n    clickHandle = (index) => {\n            if(this.state.winner === null && this.state.player !== null){\n            let newSpaces = this.state.spaces\n            if(newSpaces[index] === null){\n                newSpaces[index] = this.state.player\n                this.setState({spaces: newSpaces, player: this.state.player === \"X\" ? \"O\" : \"X\" })\n            }\n            this.checkWinner()\n        }\n     }\n     checkWinner = () => {\n         let winningCombo = [\n             [0,1,2],\n             [3,4,5],\n             [6,7,8],\n             [0,3,6],\n             [1,4,7],\n             [2,5,8],\n             [0,4,8],\n             [2,4,6]\n         ]\n         this.finalWinner(winningCombo)\n     }\n     finalWinner = (winningCombo) => {\n         let {player, spaces, winner, xWins, oWins} = this.state\n         for(let i=0; i < winningCombo.length; i++){\n             const [a,b,c] = winningCombo[i]\n             if(spaces[a] && spaces[a] === spaces[b] && spaces[a] === spaces[c]){\n                 (player === 'X') ? xWins += 1 : oWins += 1\n                 this.setState({ winner: player, xWins: xWins, oWins: oWins})\n             }\n         }\n         if(!this.state.winner && this.state.spaces.indexOf(null) === -1){\n             this.state.winner = 'No one!'\n         }\n     }\n     gameReset = () => {\n         this.setState({ spaces: Array(9).fill(null), player: null, winner: null})\n     }\n\n\n    renderBoxes = () => {\n        return this.state.spaces.map((box, index) =>\n            <div className='box' key={index} onClick={() => this.clickHandle(index)}>{box}</div>\n    )}\n\n    chooseX = () => {\n        this.setState({player: 'X'})\n    }\n    chooseO = () => {\n        this.setState({player: 'O'})\n    }\n  render() {\n\n    return (\n<div>\n<h1>Tic-Tac-Toe Game</h1>\n    <Status\n        winner={this.state.winner}\n        player={this.state.player}\n         />\n        <div className='container-1'>\n        <div className='board'>\n            {this.renderBoxes()}\n        </div>\n        </div>\n\n    <div className='player-choice'>\n        <button type='button' className='btn btn-secondary' disabled={this.state.player} onClick={() => this.chooseX()}>Choice X</button>\n        <button type='button' className='btn btn-secondary' disabled={this.state.player} onClick={() => this.chooseO()}>Choice O</button>\n    </div>\n\n    <div className=\"button-div\">\n        <button type='button' className='btn btn-success' disabled={!this.state.winner} onClick={() => this.gameReset()}>New Game</button>\n    </div>\n\n    <div className='container'>\n        <div className='row'>\n            <div className='col-sm'>\n                X Wins: {this.state.xWins}\n            </div>\n            <div className='col-sm'>\n                O Wins: {this.state.oWins}\n            </div>\n        </div>\n    </div>\n        <div className=\"copy\">\n    <p>&copy; Tucker, CJ, & Natalie | Alpha 2019</p>\n        </div>\n</div>\n\n\n    );\n  }\n}\n\nexport default Board;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Board from './Board'\n\nclass App extends Component {\n  render() {\n    return (\n      <div>\n      <Board />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}